class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static addRestaurantsInIDB(t){return DBHelper.dbPromise.then(function(e){var a=e.transaction("restaurants","readwrite"),r=a.objectStore("restaurants");return Promise.all(t.map(function(t){return r.get(t.id)?r.put(t):r.add(t)})).catch(function(t){a.abort(),console.log(t)}).then(function(){console.log("All restaurants added successfully to IndexDB")})})}static getRestaurantsFromIDB(){return DBHelper.dbPromise.then(function(t){return t.transaction("restaurants","readonly").objectStore("restaurants").getAll()})}static getRestaurantFromIDBByName(t){return DBHelper.dbPromise.then(function(e){return e.transaction("restaurants","readonly").objectStore("restaurants").index("name").get(t)})}static fetchRestaurants(t){DBHelper.getRestaurantsFromIDB().then(function(e){void 0===e||0==e.length?DBHelper.fetchRestaurantsFromNetwork((e,a)=>{e?t(e,null):(DBHelper.addRestaurantsInIDB(a),t(null,a))}):t(null,e)})}static fetchRestaurantsFromNetwork(t){fetch(DBHelper.DATABASE_URL).then(e=>e.json().then(t=>({data:t,status:e.status})).then(e=>{t(null,e.data)})).catch(function(e){t(e,null)})}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.find(e=>e.id==t);a?e(null,a):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.cuisine_type==t);e(null,a)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((a,r)=>{if(a)e(a,null);else{const a=r.filter(e=>e.neighborhood==t);e(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,a){DBHelper.fetchRestaurants((r,n)=>{if(r)a(r,null);else{let r=n;"all"!=t&&(r=r.filter(e=>e.cuisine_type==t)),"all"!=e&&(r=r.filter(t=>t.neighborhood==e)),a(null,r)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].neighborhood),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].cuisine_type),r=e.filter((t,a)=>e.indexOf(t)==a);t(null,r)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static smallImageUrlForRestaurant(t){return`/images/${t.photograph}`.replace(/.jpg/i,"-133x100.jpg")}static mediumImageUrlForRestaurant(t){return`/images/${t.photograph}`.replace(/.jpg/i,"-399x300.jpg")}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}DBHelper.dbPromise=idb.open("mws-restaurant",3,function(t){switch(t.oldVersion){case 0:case 1:console.log("Creating the restaurants object store"),t.createObjectStore("restaurants",{keyPath:"id"});case 2:console.log("Creating an index on name"),t.transaction.objectStore("restaurants").createIndex("name","name",{unique:!0})}});