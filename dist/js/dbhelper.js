class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static addRestaurantsInIDB(e){return DBHelper.dbPromise.then(function(t){const r=t.transaction("restaurants","readwrite"),n=r.objectStore("restaurants");return Promise.all(e.map(function(e){return n.get(e.id)?n.put(e):n.add(e)})).catch(function(e){r.abort(),console.log(e)}).then(function(){})})}static updateFavoriteStatus(e,t){fetch(`${DBHelper.DATABASE_URL}restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{console.log("then"),DBHelper.updateFavoriteStatusInIDB(e,t)})}static updateFavoriteStatusInIDB(e,t){DBHelper.dbPromise.then(function(r){const n=r.transaction("restaurants","readwrite").objectStore("restaurants");n.get(e).then(e=>{e.is_favorite=t,n.put(e)})})}static updateReviewInIDB(e){return DBHelper.dbPromise.then(function(t){return t.transaction("reviews","readwrite").objectStore("reviews").put(e)})}static addReview(e){if(!navigator.onLine)return void DBHelper.sendDataWhenOnline(e);let t={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments};DBHelper.postData(`${DBHelper.DATABASE_URL}reviews`,t)}static hash(e){let t,r,n=0;if(0===e.length)return n;for(t=0;t<e.length;t++)n=(n<<5)-n+(r=e.charCodeAt(t)),n|=0;return n}static sendDataWhenOnline(e){const t=JSON.stringify(e),r=DBHelper.hash(t);localStorage.setItem(r,t),window.addEventListener("online",e=>{let t,r,n,a;for(var s=0;s<localStorage.length;s++)t=localStorage.key(s),n=localStorage.getItem(t),t==(a=DBHelper.hash(n))&&(r=JSON.parse(n))&&(DBHelper.addReview(r),localStorage.removeItem(t))})}static postData(e="",t={}){const r={method:"POST",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(t)};return fetch(e,r).then(e=>e.json()).catch(e=>console.error(`Fetch Error ${e}\n`))}static addReviewsInIDB(e){return DBHelper.dbPromise.then(function(t){const r=t.transaction("reviews","readwrite"),n=r.objectStore("reviews");return Promise.all(e.map(function(e){return n.get(e.id)?n.put(e):n.add(e)})).catch(function(e){r.abort(),console.log(e)}).then(function(){})})}static getRestaurantsFromIDB(){return DBHelper.dbPromise.then(function(e){return e.transaction("restaurants","readonly").objectStore("restaurants").getAll()})}static getReviewsFromIDBById(e=0){return 0===e?DBHelper.dbPromise.then(function(e){return e.transaction("reviews","readonly").objectStore("reviews").getAll()}):DBHelper.dbPromise.then(function(t){const r=IDBKeyRange.only(Number(e));return t.transaction("reviews","readonly").objectStore("reviews").index("updatedAt").getAll(r)})}static fetchRestaurants(e){DBHelper.getRestaurantsFromIDB().then(function(t){void 0===t||0==t.length?DBHelper.fetchFromNetwork(DBHelper.DATABASE_URL+"restaurants",(t,r)=>{t?e(t,null):(DBHelper.addRestaurantsInIDB(r),e(null,r))}):e(null,t)})}static fetchFromNetwork(e="",t){fetch(e).then(e=>e.json().then(t=>({data:t,status:e.status})).then(e=>{t(null,e.data)})).catch(function(e){t(e,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t(`Restaurant with id ${e} does not exist`,null)}})}static fetchReviewsByRestaurantId(e,t){DBHelper.getReviewsFromIDBById(e).then(function(r){void 0===r||0==r.length?DBHelper.fetchFromNetwork(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${e}`,(e,r)=>{e?t(e,null):(DBHelper.addReviewsInIDB(r),t(null,r))}):t(null,r)})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static smallImageUrlForRestaurant(e){return`/images/${e.id}-133x100.jpg`}static mediumImageUrlForRestaurant(e){return`/images/${e.id}-399x300.jpg`}static imageUrlForRestaurant(e){return`/img/${e.id}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}DBHelper.dbPromise=idb.open("mws-restaurant",3,function(e){switch(e.oldVersion){case 0:case 1:e.createObjectStore("restaurants",{keyPath:"id"}),e.createObjectStore("reviews",{keyPath:"id"});case 2:e.transaction.objectStore("restaurants").createIndex("name","name",{unique:!0}),e.transaction.objectStore("reviews").createIndex("updatedAt","updatedAt")}});